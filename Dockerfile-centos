#FROM golang:1.10-alpine AS cfssl
#RUN apk add --update --no-cache git build-base
#RUN git clone https://github.com/cloudflare/cfssl.git $GOPATH/src/github.com/cloudflare/cfssl --branch 1.3.2
#RUN go get github.com/cloudflare/cfssl_trust/... \
#	&& cp -R /go/src/github.com/cloudflare/cfssl_trust /etc/cfssl
#WORKDIR /go/src/github.com/cloudflare/cfssl
#RUN CGO_ENABLED=0 GOOS=linux go install -a -ldflags '-extldflags "-static"' ./cmd/...


FROM centos:7

# Install systemd
ENV container docker
RUN yum -y update && yum -y install systemd && yum clean all \
	&& (cd /lib/systemd/system/sysinit.target.wants/ && for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done) \
	&& rm -f /lib/systemd/system/multi-user.target.wants/* \
	&& rm -f /etc/systemd/system/*.wants/* \
	&& rm -f /lib/systemd/system/local-fs.target.wants/* \
	&& rm -f /lib/systemd/system/sockets.target.wants/*udev* \
	&& rm -f /lib/systemd/system/sockets.target.wants/*initctl* \
	&& rm -f /lib/systemd/system/basic.target.wants/* \
	&& rm -f /lib/systemd/system/anaconda.target.wants/* \
	&& rm -f /usr/lib/systemd/system/*.wants/systemd-update-utmp-runlevel.service
VOLUME [ "/sys/fs/cgroup" ]
STOPSIGNAL SIGRTMIN+3

# Install docker
RUN yum -y update \
	&& yum -y install yum-utils \
	&& yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo \
	&& yum -y update && yum -y install docker-ce-18.06.1.ce-3.el7 \
	&& yum clean all
VOLUME /var/lib/docker
EXPOSE 2375

RUN yum -y install iproute ebtables ethtool socat openssl xfsprogs && yum clean all

# Install CNI plugins
ARG CNI_VERSION=v0.6.0
RUN mkdir -p /opt/cni/bin \
	&& curl -L "https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}/cni-plugins-amd64-${CNI_VERSION}.tgz" | tar -C /opt/cni/bin -xz

# Install crictl (required for kubeadm / Kubelet Container Runtime Interface (CRI))
ARG CRICTL_VERSION=v1.13.0
RUN mkdir -p /opt/bin \
	&& curl -L "https://github.com/kubernetes-incubator/cri-tools/releases/download/${CRICTL_VERSION}/crictl-${CRICTL_VERSION}-linux-amd64.tar.gz" | tar -C /opt/bin -xz

# Install kubeadm, kubelet, kubectl
# (for latest stable version see https://storage.googleapis.com/kubernetes-release/release/stable.txt)
# helm v1.14.0 doesn't work with helm keyring generators / ceph-config-helper
ARG K8S_VERSION=v1.13.5
RUN mkdir -p /opt/bin \
	&& cd /opt/bin \
	&& curl -L --remote-name-all https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/{kubeadm,kubelet,kubectl} \
	&& chmod +x kubeadm kubelet kubectl \
	&& mkdir -p /etc/kubernetes/manifests

# Install helm
ARG HELM_VERSION=v2.13.1
RUN mkdir /tmp/helm \
	&& curl -L https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar -C /tmp/helm -xz \
	&& cp /tmp/helm/linux-amd64/helm /opt/bin/helm \
	&& chmod 744 /opt/bin/helm \
	&& rm -rf /tmp/helm

ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/bin
ENV KUBE_TYPE=master

#COPY conf/net /etc/cni/net.d

# Enable systemd services
COPY conf/systemd/* /etc/systemd/system/
RUN systemctl enable docker kubelet kubeadm

# Make init script appear as systemd init process to support OCI hooks oci-systemd-hook and oci-register-machine
RUN mv /usr/sbin/init /usr/sbin/systemd
COPY entrypoint.sh /usr/sbin/init
COPY setup.sh /setup.sh

CMD ["/usr/sbin/init"]
